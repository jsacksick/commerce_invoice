<?php

/**
 * @file
 * Defines the Invoice entity and associated features.
 */

use Drupal\commerce\EntityHelper;
use Drupal\commerce\PurchasableEntityInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Element;

/**
 * Implements hook_entity_bundle_info().
 */
function commerce_invoice_entity_bundle_info() {
  $purchasable_entity_types = commerce_invoice_get_purchasable_entity_types();
  $bundles = [];
  foreach ($purchasable_entity_types as $entity_type_id => $entity_type) {
    $bundles['commerce_invoice_item'][$entity_type_id] = [
      'label' => $entity_type->getLabel(),
      'translatable' => FALSE,
      'provider' => 'commerce_invoice',
    ];
  }
  return $bundles;
}

/**
 * Gets the purchasable entity types.
 *
 * @return \Drupal\Core\Entity\EntityTypeInterface[]
 *   The purchasable entity types, keyed by entity type ID.
 */
function commerce_invoice_get_purchasable_entity_types() {
  $entity_types = \Drupal::entityTypeManager()->getDefinitions();
  return array_filter($entity_types, function (EntityTypeInterface $entity_type) {
    return $entity_type->entityClassImplements(PurchasableEntityInterface::class);
  });
}

/**
 * Implements hook_form_FORM_ID_alter() for 'commerce_order_type_form'.
 */
function commerce_invoice_form_commerce_order_type_form_alter(array &$form, FormStateInterface $form_state) {
  /** @var \Drupal\commerce_order\Entity\OrderTypeInterface $order_type */
  $order_type = $form_state->getFormObject()->getEntity();
  $invoice_type_storage = \Drupal::entityTypeManager()->getStorage('commerce_invoice_type');
  $invoice_types = $invoice_type_storage->loadMultiple();

  $form['commerce_invoice'] = [
    '#type' => 'details',
    '#title' => t('Invoice settings'),
    '#weight' => 6,
    '#open' => TRUE,
  ];
  $form['commerce_invoice']['invoice_type'] = [
    '#type' => 'select',
    '#title' => t('Invoice type'),
    '#options' => EntityHelper::extractLabels($invoice_types),
    '#default_value' => $order_type->getThirdPartySetting('commerce_invoice', 'invoice_type', 'default'),
    '#required' => TRUE,
  ];
  $form['actions']['submit']['#submit'][] = 'commerce_invoice_order_type_form_submit';
}

/**
 * Submission handler for commerce_invoice_form_commerce_order_type_form_alter().
 */
function commerce_invoice_order_type_form_submit($form, FormStateInterface $form_state) {
  /** @var \Drupal\commerce_order\Entity\OrderTypeInterface $order_type */
  $order_type = $form_state->getFormObject()->getEntity();
  $settings = $form_state->getValue(['commerce_invoice']);
  $order_type->setThirdPartySetting('commerce_invoice', 'invoice_type', $settings['invoice_type']);
  $order_type->save();
}

/**
 * Implements hook_theme().
 */
function commerce_invoice_theme() {
  return [
    'commerce_invoice' => [
      'render element' => 'elements',
    ],
  ];
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function commerce_invoice_theme_suggestions_commerce_invoice(array $variables) {
  return _commerce_entity_theme_suggestions('commerce_invoice', $variables);
}

/**
 * Prepares variables for invoice templates.
 *
 * Default template: commerce-invoice.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An associative array containing rendered fields.
 *   - attributes: HTML attributes for the containing element.
 */
function template_preprocess_commerce_invoice(array &$variables) {
  /** @var Drupal\commerce_invoice\Entity\InvoiceInterface $invoice */
  $invoice = $variables['elements']['#commerce_invoice'];

  $variables['invoice_entity'] = $invoice;
  $variables['invoice'] = [];
  foreach (Element::children($variables['elements']) as $key) {
    $variables['invoice'][$key] = $variables['elements'][$key];
  }
  if ($invoice->getBillingProfile()) {
    $profile_view_bulder = \Drupal::entityTypeManager()->getViewBuilder('profile');
    $variables['billing_information'] = $profile_view_bulder->view($invoice->getBillingProfile());
  }
  /** @var \Drupal\commerce_invoice\InvoiceTotalSummaryInterface $invoice_total_summary */
  $invoice_total_summary = \Drupal::service('commerce_invoice.invoice_total_summary');
  $variables['totals'] = $invoice_total_summary->buildTotals($invoice);
}
